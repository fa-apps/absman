<?php

namespace FA\AbsmanBundle\Entity;

/**
 * RequestEntitledCategoryRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class RequestEntitledCategoryRepository extends \Doctrine\ORM\EntityRepository
{


    public function isEntitlementUsedInRequest($user, $entitlement)
    {

        $queryBuilder = $this->createQueryBuilder('rec')
            ->select('count(rec)')
            ->innerJoin('rec.entitledCategory', 'ec', 'with', 'ec.id = :entitledCategory')
            ->innerJoin('rec.request', 'r', 'with', 'r.user = :user')
            ->setParameter('entitledCategory', $entitlement->getBinId())
            ->setParameter('user', $user->getBinId());

        $queryResult = $queryBuilder->getQuery()->getSingleScalarResult();

        return !($queryResult == 0);

    }


    public function getTaken($user, $entitledCategory)
    {

        $queryBuilder = $this->createQueryBuilder('rec')
            ->select('rec.taken', 'rec.onDemandTaken')
            ->innerJoin('rec.entitledCategory', 'ec', 'with', 'ec.id = :entitledCategory')
            ->innerJoin('rec.request', 'r', 'with', 'r.user = :user')
            ->where('rec.isCanceledOrRejected != 1')
            ->setParameter('entitledCategory', $entitledCategory->getBinId())
            ->setParameter('user', $user->getBinId());

        $queryResult = $queryBuilder->getQuery()->getArrayResult();

        $takenCount = 0;
        foreach ($queryResult as $taken) {
            $takenCount += $taken["taken"];
        }

        $onDemandTakenCount = 0;
        foreach ($queryResult as $onDemandTaken) {
            $onDemandTakenCount += $onDemandTaken["onDemandTaken"];
        }

        return array($takenCount, $onDemandTakenCount);
    }

    public function getTakenForCategory($user, $entitledCategoryId)
    {

        $queryBuilder = $this->createQueryBuilder('rec')
            ->select('rec.taken', 'rec.onDemandTaken')
            ->innerJoin('rec.entitledCategory', 'ec', 'with', 'ec.id = :entitledCategory')
            ->innerJoin('rec.request', 'r', 'with', 'r.user = :user')
            ->where('rec.isCanceledOrRejected != 1')
            ->setParameter('entitledCategory', pack('H*',$entitledCategoryId))
            ->setParameter('user', $user->getBinId());

        $queryResult = $queryBuilder->getQuery()->getArrayResult();

        $takenCount = 0;
        foreach ($queryResult as $taken) {
            $takenCount += $taken["taken"];
        }

        $onDemandTakenCount = 0;
        foreach ($queryResult as $onDemandTaken) {
            $onDemandTakenCount += $onDemandTaken["onDemandTaken"];
        }

        return array($takenCount, $onDemandTakenCount);
    }


    public function getRequestCategories($absRequest)
    {

        $queryBuilder = $this->createQueryBuilder('rec')
            ->select('rec.startDate startdate, rec.endDate enddate, rec.startDateRatio startdateratio , rec.endDateRatio enddateratio, rec.taken, rec.onDemandTaken ondemandtaken, ue.left, ue.onDemandLeft ondemandleft, ue.lastUpdate entitledlastupdate, ec.categoryName name')
            ->innerJoin('rec.entitledCategory', 'ec')
            ->innerJoin('ec.userEntitlements', 'ue')
            ->innerJoin('rec.request', 'r', 'with', 'r.id = :request')
            ->where('ue.user = r.user')
            ->setParameter('request', $absRequest->getBinId());

        $queryResult = $queryBuilder->getQuery()->getArrayResult();

        foreach($queryResult as &$item) {
            $item["startdate"] = $item["startdate"]->format("Y-m-d");
            $item["enddate"] = $item["enddate"]->format("Y-m-d");
        };


        return $queryResult;


    }


}
