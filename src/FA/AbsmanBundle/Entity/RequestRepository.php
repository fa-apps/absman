<?php

namespace FA\AbsmanBundle\Entity;

/**
 * RequestRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class RequestRepository extends \Doctrine\ORM\EntityRepository
{

     public function getStaffRequestList ($user, $start, $limit, $sort, $filter)
    {

        $queryBuilder = $this->createQueryBuilder('r')
            ->select('r.id, r.requestDate requestdate, r.startDate leavedate, r.startDateRatio leavetime, r.endDate returndate, r.endDateRatio returntime,
                        r.totalRequest totalrequest , rs.requestStatusText status, u.displayName user, a.displayName approver')
            ->innerJoin('r.approver', 'a', 'with', 'a.id = :user')
            ->innerJoin('r.user', 'u')
            ->innerJoin('r.requestStatus', 'rs')
            ->setParameter('user', $user->getBinId());


        if (!empty($filter)) {

            foreach ($filter as $filterItem) {
                $property = $filterItem["property"];
                $value = $filterItem["value"];

                switch ($property) {
                    case "listPending":
                        if ($value === true) {

                            $queryBuilder->andWhere('rs.requestStatus = :status')->setParameter('status', 'PENDING_APPROVER');
                        }
                        break;
                }
            }
        }

        if (!empty($sort)) {

            $sortColumns = array("requestdate" => "r.requestDate", "leavedate" => "r.startDate", "returndate" => "r.endDate", "totalrequest" => "r.totalRequest", "status" => "rs.requestStatusText", "user" => "u.displayName", "returntime" => "r.endDateRatio", "leavetime" => "r.startDateRatio");
            $queryBuilder->orderby($sortColumns[$sort[0]["property"]], $sort[0]["direction"]);

        } else {

            $queryBuilder->orderby('r.requestDate', 'DESC');
        }

        $query = $queryBuilder->getQuery();

        $query->setMaxResults($limit);
        $query->setFirstResult($start);

        return $query->getArrayResult();

    }


    public function getStaffRequestListCount($user, $filter)
    {
        $queryBuilder = $this->createQueryBuilder('r')
            ->select('count(r)')
            ->innerJoin('r.approver', 'a', 'with', 'a.id = :user')
            ->innerJoin('r.requestStatus', 'rs')
            ->setParameter('user', $user->getBinId());

        if (!empty($filter)) {

            foreach ($filter as $filterItem) {
                $property = $filterItem["property"];
                $value = $filterItem["value"];

                switch ($property) {
                    case "listPending":

                        if ($value === true) {
                            $queryBuilder->andWhere('rs.requestStatus = :status')->setParameter('status', 'PENDING_APPROVER');
                        }
                        break;
                }
            }
        }

        $query = $queryBuilder->getQuery();

        return $query->getSingleScalarResult();
    }


    public function getStaffRequestLastUpdate($user)
    {
        $queryBuilder = $this->createQueryBuilder('r')
            ->select('max(r.lastUpdate)')
            ->innerJoin('r.approver', 'a', 'with', 'a.id = :user')
            ->innerJoin('r.requestStatus', 'rs')
            ->setParameter('user', $user->getBinId());

        $query = $queryBuilder->getQuery();

        return $query->getSingleScalarResult();
    }


    public function getUserRequestList ($user, $start, $limit, $sort, $filter)
    {

        $queryBuilder = $this->createQueryBuilder('r')
            ->select('r.id, r.requestDate requestdate, r.startDate leavedate, r.startDateRatio leavetime, r.endDate returndate, r.endDateRatio returntime, r.totalRequest totalrequest, rs.requestStatusText status , a.displayName approver, u.displayName user')
            ->innerJoin('r.requestStatus', 'rs')
            ->innerJoin('r.approver', 'a')
            ->innerJoin('r.user', 'u', 'with', 'u.id = :user')
            ->setParameter('user', $user->getBinId());


        if (!empty($sort)) {

            $sortColumns = array("requestdate" => "r.requestDate", "leavedate" => "r.startDate", "returndate" => "r.endDate", "totalrequest" => "r.totalRequest", "status" => "rs.requestStatusText", "user" => "u.displayName", "returntime" => "r.endDateRatio", "leavetime" => "r.startDateRatio");
            $queryBuilder->orderby($sortColumns[$sort[0]["property"]], $sort[0]["direction"]);

        } else {

            $queryBuilder->orderby('r.requestDate', 'DESC');

        }

        if (!empty($filter)) {

            foreach ($filter as $filterItem) {
                $property = $filterItem["property"];
                $value = $filterItem["value"];

                switch ($property) {
                    case "listPending":

                        if ($value === true) {
                            $queryBuilder->andWhere('rs.requestStatus = :status')->setParameter('status', 'PENDING_APPROVER');
                        }
                        break;
                }
            }
        }

        $query = $queryBuilder->getQuery();

        $query->setMaxResults($limit);
        $query->setFirstResult($start);

        return $query->getArrayResult();

    }


    public function getUserRequestListCount($user, $filter)
    {
        $queryBuilder = $this->createQueryBuilder('r')
            ->select('count(r)')
            ->innerJoin('r.requestStatus', 'rs')
            ->where('r.user = :user')
            ->setParameter('user', $user->getBinId());

        if (!empty($filter)) {

            foreach ($filter as $filterItem) {
                $property = $filterItem["property"];
                $value = $filterItem["value"];

                switch ($property) {
                    case "listPending":

                        if ($value === true) {
                            $queryBuilder->andWhere('rs.requestStatus = :status')->setParameter('status', 'PENDING_APPROVER');
                        }
                        break;
                }
            }
        }

        $query = $queryBuilder->getQuery();

        return $query->getSingleScalarResult();
    }


    public function getUserRequestLastUpdate($user)
    {
        $queryBuilder = $this->createQueryBuilder('r')
            ->select('max(r.lastUpdate)')
            ->where('r.user = :user')
            ->setParameter('user', $user->getBinId());

        $query = $queryBuilder->getQuery();

        return $query->getSingleScalarResult();
    }


    public function getUserRequestsOnPeriod ($user, $begin, $end) {

        $queryBuilder = $this->createQueryBuilder('r')
            ->select('r.id, r.startDate, r.startDateRatio, r.endDate, r.endDateRatio , r.totalRequest, rs.requestStatus, rs.id requestStatusId ')
            ->innerJoin('r.requestStatus', 'rs')
            ->where('r.endDate >= :begin')
            ->andWhere('r.startDate <= :end')
            ->andWhere('r.user = :user')
            ->setParameter('begin', $begin)
            ->setParameter('end', $end)
            ->setParameter('user', $user->getBinId());

        $query = $queryBuilder->getQuery();

        return  $query->getArrayResult();
    }


    public function getValidUserRequestsOnPeriod ($user, $begin, $end) {

        $queryBuilder = $this->createQueryBuilder('r')
            ->select('r.id, r.startDate, r.startDateRatio, r.endDate, r.endDateRatio , r.totalRequest, rs.requestStatus, rs.id requestStatusId ')
            ->innerJoin('r.requestStatus', 'rs')
            ->where('r.endDate >= :begin')
            ->andWhere('r.isCanceledOrRejected = 0')
            ->andWhere('r.startDate <= :end')
            ->andWhere('r.user = :user')
            ->setParameter('begin', $begin)
            ->setParameter('end', $end)
            ->setParameter('user', $user->getBinId());

        $query = $queryBuilder->getQuery();

        return  $query->getArrayResult();
    }


    public function isOverlapping ($user,  $begin, $end) {

        $requests = $this->_em
            ->createQuery('SELECT r.id, s.requestStatus FROM FAAbsmanBundle:Request r JOIN r.requestStatus s WHERE r.user = :user AND
                r.isCanceledOrRejected = 0 AND (
                (r.startDate <= :begin  AND r.endDate >= :begin)  OR
                (r.startDate <= :end    AND r.endDate >= :end)    OR
                (r.startDate >= :begin  AND r.startDate <= :end)  OR
                (r.endDate >= :begin    AND r.endDate <= :end))')
            ->setParameter('user', $user->getBinId())
            ->setParameter('begin', $begin)
            ->setParameter('end', $end);


        return count($requests->getResult()) != 0;

    }


    public function getActive ($requestId) {

        $queryBuilder = $this->createQueryBuilder('r')
            ->innerJoin('r.requestStatus', 'rs')
            ->where('r.id = :requestId')
            ->andWhere('r.isCanceledOrRejected = 0')
            ->setParameter('requestId', pack('H*',$requestId));

        $query = $queryBuilder->getQuery();

        return  $query->getResult();


    }


    public function getActivePending ($requestId) {

        $queryBuilder = $this->createQueryBuilder('r')
            ->innerJoin('r.requestStatus', 'rs')
            ->where('r.id = :requestId')
            ->andWhere('r.isCanceledOrRejected = 0')
            ->andWhere('rs.requestStatus = :status')
            ->setParameter('requestId', pack('H*',$requestId))
            ->setParameter('status', "PENDING_APPROVER");

        $query = $queryBuilder->getQuery();

        return  $query->getResult();


    }


    public function getStandinRequestList ($user, $start, $limit, $sort, $filter)
    {

        $queryBuilder = $this->createQueryBuilder('r')
            ->select('r.id, r.requestDate requestdate, r.startDate leavedate, r.startDateRatio leavetime, r.endDate returndate, r.endDateRatio returntime,
                        r.totalRequest totalrequest , rs.requestStatusText status, u.displayName user, a.displayName approver')
            ->innerJoin('r.standInApprover', 'a', 'with', 'a.id = :user')
            ->innerJoin('r.user', 'u')
            ->innerJoin('r.requestStatus', 'rs')
            ->setParameter('user', $user->getBinId());


        if (!empty($filter)) {

            foreach ($filter as $filterItem) {
                $property = $filterItem["property"];
                $value = $filterItem["value"];

                switch ($property) {
                    case "listPending":
                        if ($value === true) {

                            $queryBuilder->andWhere('rs.requestStatus = :status')->setParameter('status', 'PENDING_APPROVER');
                        }
                        break;
                }
            }
        }

        if (!empty($sort)) {

            $sortColumns = array("requestdate" => "r.requestDate", "leavedate" => "r.startDate", "returndate" => "r.endDate", "totalrequest" => "r.totalRequest", "status" => "rs.requestStatusText", "user" => "u.displayName", "returntime" => "r.endDateRatio", "leavetime" => "r.startDateRatio");
            $queryBuilder->orderby($sortColumns[$sort[0]["property"]], $sort[0]["direction"]);

        } else {

            $queryBuilder->orderby('r.requestDate', 'DESC');
        }

        $query = $queryBuilder->getQuery();

        $query->setMaxResults($limit);
        $query->setFirstResult($start);

        return $query->getArrayResult();

    }


    public function getStandinRequestListCount($user, $filter)
    {
        $queryBuilder = $this->createQueryBuilder('r')
            ->select('count(r)')
            ->innerJoin('r.standInApprover', 'a', 'with', 'a.id = :user')
            ->innerJoin('r.requestStatus', 'rs')
            ->setParameter('user', $user->getBinId());

        if (!empty($filter)) {

            foreach ($filter as $filterItem) {
                $property = $filterItem["property"];
                $value = $filterItem["value"];

                switch ($property) {
                    case "listPending":

                        if ($value === true) {
                            $queryBuilder->andWhere('rs.requestStatus = :status')->setParameter('status', 'PENDING_APPROVER');
                        }
                        break;
                }
            }
        }

        $query = $queryBuilder->getQuery();

        return $query->getSingleScalarResult();
    }


    public function getStandinRequestLastUpdate($user)
    {
        $queryBuilder = $this->createQueryBuilder('r')
            ->select('max(r.lastUpdate)')
            ->innerJoin('r.standInApprover', 'a', 'with', 'a.id = :user')
            ->innerJoin('r.requestStatus', 'rs')
            ->setParameter('user', $user->getBinId());

        $query = $queryBuilder->getQuery();

        return $query->getSingleScalarResult();
    }


    public function getSubstituteRequestList ($user, $start, $limit, $sort, $filter)
    {

        $queryBuilder = $this->createQueryBuilder('r')
            ->select('r.id, r.requestDate requestdate, r.startDate leavedate, r.startDateRatio leavetime, r.endDate returndate, r.endDateRatio returntime,
                        r.totalRequest totalrequest , rs.requestStatusText status, u.displayName user, a.displayName approver')
            ->innerJoin('r.substitute', 'a', 'with', 'a.id = :user')
            ->innerJoin('r.user', 'u')
            ->innerJoin('r.requestStatus', 'rs')
            ->setParameter('user', $user->getBinId());


        if (!empty($filter)) {

            foreach ($filter as $filterItem) {
                $property = $filterItem["property"];
                $value = $filterItem["value"];

                switch ($property) {
                    case "listPending":
                        if ($value === true) {

                            $queryBuilder->andWhere('rs.requestStatus = :status')->setParameter('status', 'PENDING_APPROVER');
                        }
                        break;
                }
            }
        }

        if (!empty($sort)) {

            $sortColumns = array("requestdate" => "r.requestDate", "leavedate" => "r.startDate", "returndate" => "r.endDate", "totalrequest" => "r.totalRequest", "status" => "rs.requestStatusText", "user" => "u.displayName", "returntime" => "r.endDateRatio", "leavetime" => "r.startDateRatio");
            $queryBuilder->orderby($sortColumns[$sort[0]["property"]], $sort[0]["direction"]);

        } else {

            $queryBuilder->orderby('r.requestDate', 'DESC');
        }

        $query = $queryBuilder->getQuery();

        $query->setMaxResults($limit);
        $query->setFirstResult($start);

        return $query->getArrayResult();

    }


    public function getSubstituteRequestListCount($user, $filter)
    {
        $queryBuilder = $this->createQueryBuilder('r')
            ->select('count(r)')
            ->innerJoin('r.substitute', 'a', 'with', 'a.id = :user')
            ->innerJoin('r.requestStatus', 'rs')
            ->setParameter('user', $user->getBinId());

        if (!empty($filter)) {

            foreach ($filter as $filterItem) {
                $property = $filterItem["property"];
                $value = $filterItem["value"];

                switch ($property) {
                    case "listPending":

                        if ($value === true) {
                            $queryBuilder->andWhere('rs.requestStatus = :status')->setParameter('status', 'PENDING_APPROVER');
                        }
                        break;
                }
            }
        }

        $query = $queryBuilder->getQuery();

        return $query->getSingleScalarResult();
    }


    public function getSubstituteRequestLastUpdate($user)
    {
        $queryBuilder = $this->createQueryBuilder('r')
            ->select('max(r.lastUpdate)')
            ->innerJoin('r.substitute', 'a', 'with', 'a.id = :user')
            ->innerJoin('r.requestStatus', 'rs')
            ->setParameter('user', $user->getBinId());

        $query = $queryBuilder->getQuery();

        return $query->getSingleScalarResult();
    }


    public function getNotifiedRequestList ($user, $start, $limit, $sort, $filter)
    {

        $queryBuilder = $this->createQueryBuilder('r')
            ->select('r.id, r.requestDate requestdate, r.startDate leavedate, r.startDateRatio leavetime, r.endDate returndate, r.endDateRatio returntime,
                        r.totalRequest totalrequest , rs.requestStatusText status, u.displayName user, a.displayName approver')
            ->innerJoin('r.notified', 'a', 'with', 'a.id = :user')
            ->innerJoin('r.user', 'u')
            ->innerJoin('r.requestStatus', 'rs')
            ->setParameter('user', $user->getBinId());


        if (!empty($filter)) {

            foreach ($filter as $filterItem) {
                $property = $filterItem["property"];
                $value = $filterItem["value"];

                switch ($property) {
                    case "listPending":
                        if ($value === true) {

                            $queryBuilder->andWhere('rs.requestStatus = :status')->setParameter('status', 'PENDING_APPROVER');
                        }
                        break;
                }
            }
        }

        if (!empty($sort)) {

            $sortColumns = array("requestdate" => "r.requestDate", "leavedate" => "r.startDate", "returndate" => "r.endDate", "totalrequest" => "r.totalRequest", "status" => "rs.requestStatusText", "user" => "u.displayName", "returntime" => "r.endDateRatio", "leavetime" => "r.startDateRatio");
            $queryBuilder->orderby($sortColumns[$sort[0]["property"]], $sort[0]["direction"]);

        } else {

            $queryBuilder->orderby('r.requestDate', 'DESC');
        }

        $query = $queryBuilder->getQuery();

        $query->setMaxResults($limit);
        $query->setFirstResult($start);

        return $query->getArrayResult();

    }


    public function getNotifiedRequestListCount($user, $filter)
    {
        $queryBuilder = $this->createQueryBuilder('r')
            ->select('count(r)')
            ->innerJoin('r.notified', 'a', 'with', 'a.id = :user')
            ->innerJoin('r.requestStatus', 'rs')
            ->setParameter('user', $user->getBinId());

        if (!empty($filter)) {

            foreach ($filter as $filterItem) {
                $property = $filterItem["property"];
                $value = $filterItem["value"];

                switch ($property) {
                    case "listPending":

                        if ($value === true) {
                            $queryBuilder->andWhere('rs.requestStatus = :status')->setParameter('status', 'PENDING_APPROVER');
                        }
                        break;
                }
            }
        }

        $query = $queryBuilder->getQuery();

        return $query->getSingleScalarResult();
    }


    public function getNotifiedRequestLastUpdate($user)
    {
        $queryBuilder = $this->createQueryBuilder('r')
            ->select('max(r.lastUpdate)')
            ->innerJoin('r.notified', 'a', 'with', 'a.id = :user')
            ->innerJoin('r.requestStatus', 'rs')
            ->setParameter('user', $user->getBinId());

        $query = $queryBuilder->getQuery();

        return $query->getSingleScalarResult();
    }


    public function getPendingCounters ($user)
    {
        $queryBuilderA = $this->createQueryBuilder('r')
            ->select('count(r)')
            ->innerJoin('r.approver', 'a', 'with', 'a.id = :user')
            ->innerJoin('r.requestStatus', 'rs')
            ->andWhere('rs.requestStatus = :status')->setParameter('status', 'PENDING_APPROVER')
            ->setParameter('user', $user->getBinId());

        $queryA = $queryBuilderA->getQuery();

        $approverPendingCount = (int)$queryA->getSingleScalarResult();

        $queryBuilderB = $this->createQueryBuilder('r')
            ->select('count(r)')
            ->innerJoin('r.standInApprover', 'a', 'with', 'a.id = :user')
            ->innerJoin('r.requestStatus', 'rs')
            ->andWhere('rs.requestStatus = :status')->setParameter('status', 'PENDING_APPROVER')
            ->setParameter('user', $user->getBinId());

        $queryB = $queryBuilderB->getQuery();

        $standInPendingCount = (int)$queryB->getSingleScalarResult();

        $queryBuilderC = $this->createQueryBuilder('r')
            ->select('count(r)')
            ->innerJoin('r.substitute', 'a', 'with', 'a.id = :user')
            ->innerJoin('r.requestStatus', 'rs')
            ->andWhere('rs.requestStatus = :status')->setParameter('status', 'PENDING_APPROVER')
            ->setParameter('user', $user->getBinId());

        $queryC = $queryBuilderC->getQuery();

        $substitutePendingCount = (int)$queryC->getSingleScalarResult();


        return array(
            "total" => $approverPendingCount + $standInPendingCount + $substitutePendingCount,
            "approver" => $approverPendingCount,
            "standIn" => $standInPendingCount,
            "substitute" => $substitutePendingCount
        );

    }




}
